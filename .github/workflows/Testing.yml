      - name: Generate Keys
        # اضافه کردن این خط برای اطمینان از اجرای اسکریپت با Bash توصیه می‌شود
        shell: bash 
        run: |
          # --- تعیین متغیرها ---
          ACCOUNT=${{ github.event.inputs.account || env.DEFAULT_ACCOUNT }}
          KEY=${{ github.event.inputs.key || env.DEFAULT_KEY }}
          MAIL=${{ github.event.inputs.mail || env.DEFAULT_MAIL }}
          KEY_TYPE=${{ github.event.inputs.key_type || env.DEFAULT_KEY_TYPE }}
          BRANCH=${{ github.event.inputs.branch || env.DEFAULT_BRANCH }}
          OUTPUT_FILE="${{ env.OUTPUT_FILENAME }}"
          TEMP_OUTPUT="${{ env.TEMP_OUTPUT_FILE }}"
          LAST_RUN_FILE="${{ env.LAST_RUN_DATE_FILE }}" 

          echo "*********************************"
          echo "⚙️ Configuration"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Account Count: $ACCOUNT"
          echo "Key Count: $KEY"
          echo "Mail Provider: $MAIL"
          echo "Key Type: $KEY_TYPE"
          echo "Key-Gen Branch: $BRANCH"
          echo "*********************************"

          # --- آماده‌سازی و اجرای اسکریپت اصلی ---
          rm -f "$TEMP_OUTPUT"

          echo "Cloning Key-Gen repository..."
          git clone -b ${BRANCH} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen

          echo "Setting up Python environment..."
          sudo apt-get update -y > /dev/null
          sudo apt-get install -y python3-pip python3-venv > /dev/null
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt > /dev/null
          echo "Python environment setup complete."

          echo "Generating accounts/keys..."
          # *** تغییر کلیدی شماره ۱: ساده‌سازی ذخیره خروجی ***
          if [[ ${ACCOUNT} -ne 0 ]]; then
            echo "Generating $ACCOUNT accounts..."
            # استفاده از > برای نوشتن (overwrite) در فایل
            python3 main.py --auto-detect-browser --account --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${ACCOUNT} > "../$TEMP_OUTPUT"
          fi
          if [[ ${KEY} -ne 0 ]]; then
            echo "Generating $KEY keys (type: $KEY_TYPE)..."
            # استفاده از >> برای اضافه کردن (append) به فایل
            python3 main.py --auto-detect-browser ${KEY_TYPE} --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${KEY} >> "../$TEMP_OUTPUT"
          fi
          echo "Generation commands executed. Output captured in ../$TEMP_OUTPUT"
          
          cd ..

          # --- استخراج اطلاعات و ساخت فایل Markdown ---
          echo "✨ Extracting data and formatting Markdown..."
          VPN_CODES_LIST=$(grep -oP '^VPN Codes: \K.*' "$TEMP_OUTPUT" || true)
          LICENSE_NAME=$(grep -oP '^License Name: \K.*' "$TEMP_OUTPUT" || true)
          LICENSE_KEY=$(grep -oP '^License Key: \K.*' "$TEMP_OUTPUT" || true)
          LICENSE_OUT_DATE=$(grep -oP '^License Out Date: \K.*' "$TEMP_OUTPUT" || true)
          ACCOUNT_EMAIL=$(grep -oP '^Account Email: \K.*' "$TEMP_OUTPUT" || true)
          ACCOUNT_PASSWORD=$(grep -oP '^Account Password: \K.*' "$TEMP_OUTPUT" || true)

          NEW_ENTRY_FILE="new_entry.md.tmp"
          export TZ='Asia/Tehran'
          IRAN_DATE=$(date '+%A, %d %B %Y, %H:%M')
          CURRENT_DATETIME_IRAN="${IRAN_DATE} IRN"
          
          # *** تغییر کلیدی شماره ۲: استفاده از cat <<EOF برای ساختار تمیزتر ***
          cat <<EOF > "$NEW_ENTRY_FILE"
## Generated On: ${CURRENT_DATETIME_IRAN}

> [!WARNING]
> ∆ Triggered by: ${{ github.event_name }}  
> ∆ Time-Sensitive Codes:  
> - Expire in 24 hours
> - Single-device binding
> - No reactivation permitted

<br />

EOF

          if [[ -n "$VPN_CODES_LIST" ]]; then
            cat <<EOF >> "$NEW_ENTRY_FILE"
**ESET VPN ACCESS CODES**

\`\`\`ruby
$(echo "$VPN_CODES_LIST" | sed 's/, /\n/g')
\`\`\`

<br />

EOF
          fi

          if [[ -n "$LICENSE_KEY" ]]; then
            cat <<EOF >> "$NEW_ENTRY_FILE"
**ESET BUSINESS SECURITY LICENSE**

\`\`\`yml
Expiry: ${LICENSE_OUT_DATE:-N/A}
License Key: $LICENSE_KEY
\`\`\`

<br />

EOF
          fi

          if [[ -n "$ACCOUNT_EMAIL" ]]; then
            cat <<EOF >> "$NEW_ENTRY_FILE"
**ESET ACCOUNT CREDENTIALS**

\`\`\`yml
Email: $ACCOUNT_EMAIL
Password: ${ACCOUNT_PASSWORD:-N/A}
\`\`\`

<br />

EOF
          fi

          cat <<EOF >> "$NEW_ENTRY_FILE"
Everything you need to know about ESET [^1]  
Need more VPN access codes? [^2]

<br />

[^1]: [View Full Post](https://telegram.me/s/F_NiREvil/2113)

[^2]: [Explore The Darkness Hub](https://telegram.me/s/Eset_key_trial)

---

<br><br />

EOF
          echo "Markdown formatting complete for the new entry in $NEW_ENTRY_FILE."

          # --- منطق ترکیب فایل‌ها (بدون تغییر) ---
          echo "Determining whether to prepend or overwrite based on date..."
          CURRENT_DATE_UTC=$(date -u +'%Y-%m-%d')
          LAST_RUN_DATE="never"

          if [[ -f "$LAST_RUN_FILE" ]]; then
              LAST_RUN_DATE=$(cat "$LAST_RUN_FILE")
          fi

          if [[ "$CURRENT_DATE_UTC" != "$LAST_RUN_DATE" ]] || [[ ! -f "$OUTPUT_FILE" ]]; then
              echo "Overwriting ${OUTPUT_FILE} with the new entry."
              mv "$NEW_ENTRY_FILE" "$OUTPUT_FILE"
              echo "$CURRENT_DATE_UTC" > "$LAST_RUN_FILE"
          else
              echo "Prepending the new entry to ${OUTPUT_FILE}."
              TEMP_COMBINED_FILE="combined.md.tmp"
              cat "$NEW_ENTRY_FILE" "$OUTPUT_FILE" > "$TEMP_COMBINED_FILE"
              mv "$TEMP_COMBINED_FILE" "$OUTPUT_FILE"
              rm "$NEW_ENTRY_FILE"
          fi

          echo "File update complete for ${OUTPUT_FILE}."
