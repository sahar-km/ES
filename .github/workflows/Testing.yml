name: Testing

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      account:
        description: 'Number of Accounts to be generated (default = 0)'
        required: false
        default: '0'
      key:
        description: 'Number of Keys to be generated (default = 1)'
        required: false
        default: '1'
      mail:
        description: 'Choose the mail provider to generate license'
        required: true
        type: choice
        options:
        - fakemail
        - guerrillamail
        - 1secmail
        - developermail
        - mailticking
        - inboxes
        - incognitomail
        default: fakemail
      key_type:
        description: 'Operation'
        required: true
        type: choice
        options:
        - --key
        - --small-business-key
        - --vpn-codes
        default: --vpn-codes
      branch:
        description: "Key-Gen Repository branch (default = main)"
        required: false
        default: 'main'
  schedule:
    - cron: '0 */4 * * *'

jobs:
  generate-and-commit:
    runs-on: ubuntu-latest
    env:
      DEFAULT_ACCOUNT: '0'
      DEFAULT_KEY: '1'
      DEFAULT_MAIL: 'fakemail'
      DEFAULT_KEY_TYPE: '--vpn-codes'
      DEFAULT_BRANCH: 'main'
      OUTPUT_FILENAME: 'ESET-CODES.md'
      TEMP_OUTPUT_FILE: 'key_gen_output.log'
      LOG_DIR: '/'
      LAST_RUN_DATE_FILE: '.last_run_date'

    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v4

      - name: Create Log Directory
        run: |
          mkdir -p "${{ env.LOG_DIR }}"
          echo "Created directory: ${{ env.LOG_DIR }}"

      - name: Generate Keys
        run: |
          ACCOUNT=${{ github.event.inputs.account || env.DEFAULT_ACCOUNT }}
          KEY=${{ github.event.inputs.key || env.DEFAULT_KEY }}
          MAIL=${{ github.event.inputs.mail || env.DEFAULT_MAIL }}
          KEY_TYPE=${{ github.event.inputs.key_type || env.DEFAULT_KEY_TYPE }}
          BRANCH=${{ github.event.inputs.branch || env.DEFAULT_BRANCH }}
          OUTPUT_FILE="${{ env.OUTPUT_FILENAME }}"
          TEMP_OUTPUT="${{ env.TEMP_OUTPUT_FILE }}"
          LAST_RUN_FILE="${{ env.LAST_RUN_DATE_FILE }}" 

          echo "*********************************"
          echo "⚙️ Configuration"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Account Count: $ACCOUNT"
          echo "Key Count: $KEY"
          echo "Mail Provider: $MAIL"
          echo "Key Type: $KEY_TYPE"
          echo "Key-Gen Branch: $BRANCH"
          echo "Output File: $OUTPUT_FILE"
          echo "Temp Output File: $TEMP_OUTPUT"
          echo "Last Run Date File: $LAST_RUN_FILE"
          echo "Log Directory: ${{ env.LOG_DIR }}"
          echo "*********************************"

          rm -f "$TEMP_OUTPUT"

          echo "Cloning Key-Gen repository..."
          git clone -b ${BRANCH} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen

          echo "Setting up Python environment..."
          sudo apt-get update -y > /dev/null
          sudo apt-get install -y python3-pip python3-venv > /dev/null
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt > /dev/null
          echo "Python environment setup complete."

          echo "Generating accounts/keys and capturing output..."
          if [[ ${ACCOUNT} -ne 0 ]]; then
            echo "Generating $ACCOUNT accounts..."
            python3 main.py --auto-detect-browser --account --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${ACCOUNT} | tee "../$TEMP_OUTPUT"
          fi
          if [[ ${KEY} -ne 0 ]]; then
            echo "Generating $KEY keys (type: $KEY_TYPE)..."
            APPEND_FLAG=""
            if [[ -f "../$TEMP_OUTPUT" ]]; then
              APPEND_FLAG="-a"
            fi
            
            python3 main.py --auto-detect-browser ${KEY_TYPE} --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${KEY} | tee $APPEND_FLAG "../$TEMP_OUTPUT"
          fi
          echo "Generation commands executed. Output captured in ../$TEMP_OUTPUT"
          
          cd ..

          # --- Extract values and format Markdown for NEW entry ---
          echo "✨ Extracting data and formatting Markdown for the new entry..."
          VPN_CODES_LIST=$(grep -oP '^VPN Codes: \K.*' "$TEMP_OUTPUT" || true)
          LICENSE_NAME=$(grep -oP '^License Name: \K.*' "$TEMP_OUTPUT" || true)
          LICENSE_KEY=$(grep -oP '^License Key: \K.*' "$TEMP_OUTPUT" || true)
          LICENSE_OUT_DATE=$(grep -oP '^License Out Date: \K.*' "$TEMP_OUTPUT" || true)
          ACCOUNT_EMAIL=$(grep -oP '^Account Email: \K.*' "$TEMP_OUTPUT" || true)
          ACCOUNT_PASSWORD=$(grep -oP '^Account Password: \K.*' "$TEMP_OUTPUT" || true)

          NEW_ENTRY_FILE="new_entry.md.tmp"
          IRAN_DATE=$(TZ='Asia/Tehran' date '+%A, %d %B %Y, %H:%M')
          CURRENT_DATETIME_IRAN="${IRAN_DATE} IRN"
          
          {
            echo "## Generated On: ${CURRENT_DATETIME_IRAN}"
            echo ""
            echo "> [!WARNING]"
            echo "> ∆ Triggered by: ${{ github.event_name }}  "
            echo "> ∆ Time-Sensitive Codes:  "
            echo "> - Expire in 24 hours"
            echo "> - Single-device binding"
            echo "> - No reactivation permitted"
            echo ""
            echo "<br />"
            echo ""
          } > "$NEW_ENTRY_FILE"

          # 1. Add VPN Codes Section (if VPN codes exist)
          if [[ -n "$VPN_CODES_LIST" ]]; then
            {
              echo "**ESET VPN ACCESS CODES**"
              echo ""
              echo '```ruby'
              echo "$VPN_CODES_LIST" | sed 's/, /\n/g'
              echo '```'
              echo ""
              echo "<br />"
              echo ""
            } >> "$NEW_ENTRY_FILE"
          fi

          # 2. Add ESET Security License Section (if License Key exists)
          if [[ -n "$LICENSE_KEY" ]]; then
            {
              echo "**ESET BUSINESS SECURITY LICENSE**"
              echo ""
              echo "```yml"
              echo "Expiry: ${LICENSE_OUT_DATE:-N/A}"
              echo "License Key: $LICENSE_KEY"
              echo '```'
              echo ""
              echo "<br  />"
              echo ""
            } >> "$NEW_ENTRY_FILE"
          fi

          # 3. Add ESET Account Section (if Account Email exists)
          if [[ -n "$ACCOUNT_EMAIL" ]]; then
            {
              echo "**ESET ACCOUNT CREDENTIALS**"
              echo ""
              echo '```yml'
              echo "Email: $ACCOUNT_EMAIL"
              if [[ -n "$ACCOUNT_PASSWORD" ]]; then
                echo "Password: $ACCOUNT_PASSWORD"
              else
                echo "N/A"
              fi
              echo '```'
              echo ""
              echo "<br  />"
              echo ""
            } >> "$NEW_ENTRY_FILE"
          fi

          # 4. Add Static Footer Link Section
          {
            echo "Everything you need to know about ESET [^1]  "
            echo "Need more VPN access codes? [^2]"
            echo ""
            echo "<br />"
            echo ""
            echo "[^1]: [View Full Post](https://telegram.me/s/F_NiREvil/2113)"
            echo ""
            echo "[^2]: [Explore The Darkness Hub](https://telegram.me/s/Eset_key_trial)"
            echo ""
            echo "---"
            echo ""
            echo "<br><br  />"
            echo ""
          } >> "$NEW_ENTRY_FILE"

          echo "Markdown formatting complete for the new entry in $NEW_ENTRY_FILE."

          echo "Determining whether to prepend or overwrite based on date..."
          CURRENT_DATE_UTC=$(date -u +'%Y-%m-%d')
          LAST_RUN_DATE="never"

          if [[ -f "$LAST_RUN_FILE" ]]; then
              LAST_RUN_DATE=$(cat "$LAST_RUN_FILE")
              echo "Last reset/write date found in $LAST_RUN_FILE: $LAST_RUN_DATE"
          else
              echo "$LAST_RUN_FILE not found. Assuming first run or manual deletion."
          fi

          echo "Current UTC date: $CURRENT_DATE_UTC"

          SHOULD_RESET=false
          if [[ "$CURRENT_DATE_UTC" != "$LAST_RUN_DATE" ]] || [[ ! -f "$OUTPUT_FILE" ]]; then
              echo "Reset condition met: New day ($CURRENT_DATE_UTC != $LAST_RUN_DATE) or output file missing."
              SHOULD_RESET=true
          else
              echo "Reset condition not met: Still the same day ($CURRENT_DATE_UTC == $LAST_RUN_DATE) and output file exists."
          fi

          if [[ "$SHOULD_RESET" == "true" ]]; then
              echo "Overwriting ${OUTPUT_FILE} with the new entry."
              mv "$NEW_ENTRY_FILE" "$OUTPUT_FILE"
              echo "Updating $LAST_RUN_FILE with current date: $CURRENT_DATE_UTC"
              echo "$CURRENT_DATE_UTC" > "$LAST_RUN_FILE"
          else
              echo "Prepending the new entry to ${OUTPUT_FILE}."
              TEMP_COMBINED_FILE="combined.md.tmp"
              cat "$NEW_ENTRY_FILE" "$OUTPUT_FILE" > "$TEMP_COMBINED_FILE"
              mv "$TEMP_COMBINED_FILE" "$OUTPUT_FILE"
              rm "$NEW_ENTRY_FILE"
              echo "$LAST_RUN_FILE remains unchanged ($LAST_RUN_DATE)."
          fi

          # rm -f "$TEMP_OUTPUT" # Uncomment if you want to remove the log file

          echo "File update complete for ${OUTPUT_FILE}."
          echo "Final content of ${OUTPUT_FILE} (first 100 lines):"
          head -n 100 "${OUTPUT_FILE}"


      - name: Commit and Push Generated Keys
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat: Update ESET generated keys/accounts (${{ github.event_name }})"
          file_pattern: "${{ env.OUTPUT_FILENAME }} ${{ env.LAST_RUN_DATE_FILE }}"
          commit_user_name: "ESET Security Bot"
          commit_user_email: "pr@eset.com"
          commit_options: '--signoff'
          # push_options: '--force'
